"""Script para executar o coletor de not√≠cias manualmente."""
import asyncio
import logging
import sys
from pathlib import Path

# Adicionar o diret√≥rio raiz ao path para importar os m√≥dulos do projeto
sys.path.append(str(Path(__file__).parent.parent))

from app.core.config import settings
from app.core.database import mongodb_manager
from app.services.news.collector import news_collector
from app.services.ai.topic_cluster import topic_cluster

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Lista de consultas de busca para coleta de not√≠cias
SEARCH_QUERIES = [
    "autismo Brasil",
    "TEA Brasil",
    "transtorno do espectro autista",
    "inclus√£o autismo",
    "direitos autistas",
    "tratamento autismo",
    "educa√ß√£o especial autismo"
]

# Pa√≠s para coleta de not√≠cias
COUNTRY = 'BR'

async def main():
    """Fun√ß√£o principal para executar o coletor de not√≠cias."""
    try:
        # Conectar ao MongoDB
        await mongodb_manager.connect_to_mongodb()
        if mongodb_manager.db is None:
            logger.error("‚ùå N√£o foi poss√≠vel conectar ao banco de dados")
            return
        
        logger.info("‚úÖ Conectado ao MongoDB")
        
        # Coletar not√≠cias para cada consulta
        for query in SEARCH_QUERIES:
            try:
                logger.info(f"üîç Coletando not√≠cias para: {query}")
                await news_collector.process_news_batch(query, COUNTRY)
                logger.info(f"‚úÖ Conclu√≠da coleta para: {query}")
            except Exception as e:
                logger.error(f"‚ùå Erro ao processar a consulta '{query}': {str(e)}", exc_info=True)
        
        # Agrupar not√≠cias em t√≥picos
        logger.info("üîç Agrupando not√≠cias em t√≥picos...")
        await topic_cluster.cluster_recent_news(COUNTRY)
        logger.info("‚úÖ Agrupamento de t√≥picos conclu√≠do")
        
    except Exception as e:
        logger.error(f"‚ùå Erro durante a execu√ß√£o: {str(e)}", exc_info=True)
    finally:
        # Fechar conex√£o com o banco de dados
        await mongodb_manager.close_mongodb_connection()
        logger.info("üîå Conex√£o com o MongoDB encerrada")

if __name__ == "__main__":
    asyncio.run(main())
