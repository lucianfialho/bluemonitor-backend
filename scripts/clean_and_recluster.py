#!/usr/bin/env python3
"""
Script para limpar t√≥picos corrompidos e executar novamente a clusteriza√ß√£o.
"""
import asyncio
from pathlib import Path
import sys
from bson import ObjectId

# Adiciona o diret√≥rio raiz ao PATH para garantir que os imports funcionem
project_root = str(Path(__file__).parent.parent)
if project_root not in sys.path:
    sys.path.insert(0, project_root)

from app.core.database import mongodb_manager
from app.core.logging import configure_logging
from app.services.ai.topic_cluster import TopicCluster
import logging

# Configurar logging
configure_logging()
logger = logging.getLogger(__name__)

async def clean_corrupted_topics():
    """Remove t√≥picos que n√£o t√™m artigos v√°lidos."""
    try:
        async with mongodb_manager.get_db() as db:
            # Encontrar todos os t√≥picos
            topics = await db.topics.find({}).to_list(length=None)
            
            print(f"üîç Verificando {len(topics)} t√≥picos...")
            
            # Lista para armazenar IDs de t√≥picos corrompidos
            corrupted_topic_ids = []
            
            for topic in topics:
                topic_id = topic.get('_id')
                article_ids = topic.get('articles', [])
                
                if not article_ids:
                    print(f"  ‚ö†Ô∏è  T√≥pico sem artigos: {topic.get('title', 'Sem t√≠tulo')} (ID: {topic_id})")
                    corrupted_topic_ids.append(topic_id)
                    continue
                
                # Verificar se os artigos existem
                valid_articles = 0
                for article_id in article_ids:
                    article = await db.news.find_one({"_id": article_id})
                    if not article and isinstance(article_id, str):
                        try:
                            article = await db.news.find_one({"_id": ObjectId(article_id)})
                        except:
                            pass
                    
                    if article:
                        valid_articles += 1
                
                if valid_articles == 0 and article_ids:
                    print(f"  ‚ö†Ô∏è  T√≥pico com {len(article_ids)} artigos inv√°lidos: {topic.get('title', 'Sem t√≠tulo')} (ID: {topic_id})")
                    corrupted_topic_ids.append(topic_id)
            
            # Remover t√≥picos corrompidos
            if corrupted_topic_ids:
                print(f"\nüóëÔ∏è  Removendo {len(corrupted_topic_ids)} t√≥picos corrompidos...")
                result = await db.topics.delete_many({"_id": {"$in": corrupted_topic_ids}})
                print(f"‚úÖ {result.deleted_count} t√≥picos removidos com sucesso!")
                return True
            else:
                print("‚úÖ Nenhum t√≥pico corrompido encontrado.")
                return False
    
    except Exception as e:
        logger.error(f"Erro ao limpar t√≥picos corrompidos: {str(e)}", exc_info=True)
        return False

async def reset_articles_for_reclustering(days=7):
    """Marca artigos para serem reprocessados na clusteriza√ß√£o."""
    try:
        from datetime import datetime, timedelta
        
        print(f"\nüîÑ Marcando artigos dos √∫ltimos {days} dias para reprocessamento...")
        
        cutoff_date = datetime.utcnow() - timedelta(days=days)
        
        async with mongodb_manager.get_db() as db:
            # Atualizar artigos recentes para serem processados novamente
            result = await db.news.update_many(
                {
                    "processed_at": {"$exists": True},
                    "publish_date": {"$gte": cutoff_date.isoformat()}
                },
                {"$unset": {"in_topic": "", "topic_id": ""}, "$set": {"processed_at": None}}
            )
            
            print(f"‚úÖ {result.modified_count} artigos marcados para reprocessamento.")
            return result.modified_count > 0
    
    except Exception as e:
        logger.error(f"Erro ao marcar artigos para reprocessamento: {str(e)}", exc_info=True)
        return False

async def run_clustering():
    """Executa o processo de clusteriza√ß√£o."""
    try:
        print("\nüîç Iniciando clusteriza√ß√£o de artigos...")
        
        cluster = TopicCluster()
        await cluster.cluster_recent_news()
        
        print("‚úÖ Clusteriza√ß√£o conclu√≠da com sucesso!")
        return True
    except Exception as e:
        logger.error(f"Erro durante a clusteriza√ß√£o: {str(e)}", exc_info=True)
        return False

async def main():
    """Fun√ß√£o principal."""
    print("üõ†Ô∏è  IN√çCIO DA LIMPEZA E RECLUSTERIZA√á√ÉO")
    print("=" * 50)
    
    try:
        # Passo 1: Limpar t√≥picos corrompidos
        print("\n1Ô∏è‚É£  VERIFICANDO T√ìPICOS CORROMPIDOS")
        print("-" * 50)
        await clean_corrupted_topics()
        
        # Passo 2: Marcar artigos para reprocessamento
        print("\n2Ô∏è‚É£  MARCADO ARTIGOS PARA REPROCESSAMENTO")
        print("-" * 50)
        days = 7  # N√∫mero de dias para incluir na reclusteriza√ß√£o
        await reset_articles_for_reclustering(days=days)
        
        # Passo 3: Executar clusteriza√ß√£o
        print("\n3Ô∏è‚É£  EXECUTANDO CLUSTERIZA√á√ÉO")
        print("-" * 50)
        await run_clustering()
        
        print("\n‚úÖ PROCESSO CONCLU√çDO COM SUCESSO!")
        
    except Exception as e:
        logger.error(f"Erro durante o processo: {str(e)}", exc_info=True)
        print("\n‚ùå OCORREU UM ERRO DURANTE O PROCESSO. VERIFIQUE OS LOGS PARA MAIS DETALHES.")

if __name__ == "__main__":
    asyncio.run(main())
