#!/usr/bin/env python3
"""
Script para verificar a exist√™ncia dos artigos no banco de dados.
"""
import asyncio
from pathlib import Path
import sys
from bson import ObjectId

# Adiciona o diret√≥rio raiz ao PATH para garantir que os imports funcionem
project_root = str(Path(__file__).parent.parent)
if project_root not in sys.path:
    sys.path.insert(0, project_root)

from app.core.database import mongodb_manager
from app.core.logging import configure_logging
import logging

# Configurar logging
configure_logging()
logger = logging.getLogger(__name__)

async def verify_articles():
    """Verifica a exist√™ncia dos artigos no banco de dados."""
    try:
        async with mongodb_manager.get_db() as db:
            # Buscar o t√≥pico
            topic = await db.topics.find_one({})
            
            if not topic:
                print("‚ÑπÔ∏è  Nenhum t√≥pico encontrado no banco de dados.")
                return
            
            print(f"üìå T√≥pico: {topic.get('title', 'Sem t√≠tulo')}")
            print(f"üÜî ID: {topic.get('_id')}")
            print(f"üìÖ Criado em: {topic.get('created_at')}")
            print(f"üì∞ Total de artigos: {len(topic.get('articles', []))}")
            
            article_ids = topic.get('articles', [])
            if not article_ids:
                print("‚ÑπÔ∏è  Nenhum artigo neste t√≥pico.")
                return
            
            print("\nüîç Verificando artigos...")
            print("=" * 50)
            
            valid_articles = 0
            invalid_articles = 0
            
            for i, article_id in enumerate(article_ids, 1):
                try:
                    # Tentar encontrar o artigo pelo ID
                    article = await db.news.find_one({"_id": ObjectId(article_id)})
                    
                    if article:
                        valid_articles += 1
                        status = "‚úÖ V√ÅLIDO"
                    else:
                        invalid_articles += 1
                        status = "‚ùå N√ÉO ENCONTRADO"
                    
                    print(f"{i}. {article_id} - {status}")
                    
                except Exception as e:
                    invalid_articles += 1
                    print(f"{i}. {article_id} - ‚ùå ERRO: {str(e)}")
            
            print("\nüìä RESUMO:")
            print("=" * 50)
            print(f"Total de artigos: {len(article_ids)}")
            print(f"Artigos v√°lidos: {valid_articles}")
            print(f"Artigos inv√°lidos/n√£o encontrados: {invalid_articles}")
            
            # Verificar not√≠cias sem t√≥pico
            news_without_topic = await db.news.count_documents({"in_topic": {"$ne": True}})
            print(f"\nüì∞ NOT√çCIAS SEM T√ìPICO: {news_without_topic}")
            
            if news_without_topic > 0:
                print("\nüìù Executando clusteriza√ß√£o para incluir not√≠cias restantes...")
                from app.services.ai.topic_cluster import TopicCluster
                cluster = TopicCluster()
                await cluster.cluster_recent_news()
                print("‚úÖ Clusteriza√ß√£o conclu√≠da!")
    
    except Exception as e:
        logger.error(f"Erro ao verificar artigos: {str(e)}", exc_info=True)
        print(f"‚ùå Ocorreu um erro: {str(e)}")
    finally:
        if 'db' in locals():
            await db.client.close()

if __name__ == "__main__":
    print("üîç VERIFICA√á√ÉO DE ARTIGOS")
    print("=" * 50)
    asyncio.run(verify_articles())
