#!/usr/bin/env python3
"""
Script para verificar o t√≥pico existente.
"""
import asyncio
from pathlib import Path
import sys

# Adiciona o diret√≥rio raiz ao PATH para garantir que os imports funcionem
project_root = str(Path(__file__).parent.parent)
if project_root not in sys.path:
    sys.path.insert(0, project_root)

from app.core.database import mongodb_manager
from app.core.logging import configure_logging
import logging

# Configurar logging
configure_logging()
logger = logging.getLogger(__name__)

async def check_topic():
    """Verifica o t√≥pico existente."""
    try:
        async with mongodb_manager.get_db() as db:
            # Buscar o t√≥pico
            topic = await db.topics.find_one({})
            
            if not topic:
                print("‚ÑπÔ∏è  Nenhum t√≥pico encontrado no banco de dados.")
                return
            
            print(f"üìå T√≥pico: {topic.get('title', 'Sem t√≠tulo')}")
            print(f"üÜî ID: {topic.get('_id')}")
            print(f"üìÖ Criado em: {topic.get('created_at')}")
            print(f"üì∞ Total de artigos: {len(topic.get('articles', []))}")
            
            # Verificar se h√° artigos
            article_ids = topic.get('articles', [])
            if not article_ids:
                print("‚ÑπÔ∏è  Nenhum artigo neste t√≥pico.")
                return
            
            # Mostrar os primeiros 5 artigos
            print("\nüì∞ PRIMEIROS 5 ARTIGOS:")
            print("=" * 50)
            
            for i, article_id in enumerate(article_ids[:5], 1):
                article = await db.news.find_one({"_id": article_id})
                if not article:
                    print(f"{i}. ‚ùå Artigo n√£o encontrado (ID: {article_id})")
                    continue
                
                title = article.get('extracted_title', article.get('serpapi_title', 'Sem t√≠tulo'))
                source = article.get('source_name', 'Fonte desconhecida')
                url = article.get('original_url', 'N/A')
                
                print(f"{i}. {title}")
                print(f"   üì∞ Fonte: {source}")
                print(f"   üîó URL: {url}\n")
            
            # Verificar not√≠cias sem t√≥pico
            news_without_topic = await db.news.count_documents({"in_topic": {"$ne": True}})
            print(f"\nüì∞ NOT√çCIAS SEM T√ìPICO: {news_without_topic}")
            
            if news_without_topic > 0:
                print("\nüìù Executando clusteriza√ß√£o para incluir not√≠cias restantes...")
                from app.services.ai.topic_cluster import TopicCluster
                cluster = TopicCluster()
                await cluster.cluster_recent_news()
                print("‚úÖ Clusteriza√ß√£o conclu√≠da!")
    
    except Exception as e:
        logger.error(f"Erro ao verificar t√≥pico: {str(e)}", exc_info=True)
        print(f"‚ùå Ocorreu um erro: {str(e)}")
    finally:
        await mongodb_manager.close()

if __name__ == "__main__":
    print("üîç Verificando t√≥pico existente...")
    asyncio.run(check_topic())
